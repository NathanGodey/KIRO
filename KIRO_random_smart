import matplotlib.pyplot as plt
from math import *
import numpy as np
import csv
import copy
import random as rd

ville = "nice"


def graph(liste):
    plt.plot(range(len(liste)), liste)


def row_count_func(ville):
    with open(ville + "/distances.csv") as csv_file:
        csv_reader = csv.reader(csv_file)
        row_count = sum(1 for row in csv_reader)
    csv_file.close()
    return row_count


def parse_dist(ville):
    with open(ville + "/distances.csv") as csv_file:
        csv_reader = csv.reader(csv_file)
        row_count = row_count_func(ville)
        nb_nodes = int(sqrt(row_count))
        distances = [[0 for i in range(nb_nodes)] for j in range(nb_nodes)]

        liste = [int(row[0]) for row in csv_reader]
        for i in range(nb_nodes):
            for j in range(nb_nodes):
                distances[i][j] = liste[j + i * nb_nodes]
    return distances


def parse_nodes(ville):
    nodes = []
    distribution = []
    with open(ville + "/nodes.csv") as csv_file:
        csv_reader = csv.reader(csv_file, delimiter=';')
        for row in csv_reader:
            nodes += [[row[0], row[1]]]
            distribution.append(row[2] == "distribution")

    return nodes[1:], distribution[1:]


distances = parse_dist(ville)
nb_nodes = len(distances)
nodes, distribution = parse_nodes(ville)


def result(ville, reseaux):
    file = open(ville + "/result.txt", "w")
    for reseau in reseaux:
        file.write('b')
        reseau_str = ""
        for chaine in reseau:
            reseau_str += " " + str(chaine[0])
        file.write(reseau_str + "\n")
        for chaine in reseau:
            if len(chaine) > 1:
                file.write("c")
                for node in chaine:
                    file.write(" " + str(node))
                file.write("\n")


def cost(reseaux):
    c = 0

    for reseau in reseaux:
        for i in range(len(reseau)):
            c += distances[reseau[i][0]][reseau[(i + 1) % len(reseau)][0]]
            if len(reseau[i]) > 1:
                for j in range(len(reseau[i]) - 1):
                    c += distances[reseau[i][j]][reseau[i][j + 1]]

    return c


def init_reseaux():
    return [[[i]] for i in range(sum(distribution))]


def valid_reseaux(reseaux, final=False):
    valid = True
    hist = [0 for i in range(nb_nodes)]
    for r in reseaux:
        for c in r:
            for k in c:
                hist[k] += 1
    for i in hist:
        if i > 1 or (final and i<1):
            valid = False
            break
    return valid


reseaux = init_reseaux()
print(cost(reseaux))


def evolve(reseaux, node):
    R = copy.deepcopy(reseaux)
    optR = copy.deepcopy(R)
    m = float('inf')

    for i_r in range(len(reseaux)):
        R = copy.deepcopy(reseaux)
        for i in range(len(R[i_r])):
            if len(R[i_r][i]) <= 5:
                for j in range(distribution[R[i_r][i][0]], len(R[i_r][i]) + 1):
                    R[i_r][i] = R[i_r][i][:j] + [node] + R[i_r][i][j:]
                    C = cost(R)
                    if C < m and valid_reseaux(R):
                        m = C
                        optR = copy.deepcopy(R)
                    R = copy.deepcopy(reseaux)

        if len(R[i_r]) <= 30:
            for j in range(len(R[i_r])):
                R[i_r] = R[i_r][:j + 1] + [[node]] + R[i_r][j + 1:]
                C = cost(R)
                if C < m and valid_reseaux(R):
                    m = C
                    optR = copy.deepcopy(R)
                R = copy.deepcopy(reseaux)

    for i_pd in range(sum(distribution)):

        R = R + [[[i_pd, node]]]

        C = cost(R)
        if C < m and valid_reseaux(R):
            m = C
            optR = copy.deepcopy(R)
            R = copy.deepcopy(reseaux)
        R = copy.deepcopy(reseaux)
    return optR


def delete(reseaux, node):
    for reseau in reseaux:
        for chaine in reseau:
            if node != chaine[0]:
                if node in chaine:
                    chaine.remove(node)


def mutate(permut):
    size=rd.randint(2,15)
    place=rd.randint(0,max(1,len(permut)-size))
    perm_ind=list(np.random.permutation(range(place,place+size)))
    patch=[permut[i] for i in perm_ind]
    permut=permut[:place]+[permut[i] for i in perm_ind]+permut[place+size:]
    return permut

def best_mutation(reseaux,permut):
    tries=[mutate(permut) for i in range(5)]
    m=float('inf')
    opt_t=[]
    for t in tries:
        temp_reseaux=copy.deepcopy(reseaux)
        for node in t:
            delete(temp_reseaux, node)
            temp_reseaux = evolve(reseaux, node)
        if cost(temp_reseaux)<m:
            opt_t=t

    return opt_t


def find(reseaux_ini):
    reseaux = copy.deepcopy(reseaux_ini)
    m = float('inf')

    for i in range(100):
        reseaux = copy.deepcopy(reseaux_ini)
        permuts = [[0, list(np.random.permutation([i for i in range(sum(distribution), nb_nodes)]))] for j in range(10)]
        for k in range(5):
            for permut in permuts:
                for node in permut[1]:
                    delete(reseaux, node)
                    reseaux = evolve(reseaux, node)
                permut[0]=cost(reseaux)
            permuts.sort(key=lambda x: x[0])
            permuts=permuts[:len(permuts)//4]+[[0,mutate(p[1])] for p in permuts[:3*len(permuts)//4]]
        nodes_permut = permuts[0][1]
        c = cost(reseaux) + 1
        while cost(reseaux) != c:
            c = cost(reseaux)

            for node in nodes_permut:
                delete(reseaux, node)
                reseaux = evolve(reseaux, node)
            nodes_permut = best_mutation(reseaux,nodes_permut)

        C = cost(reseaux)
        if C < m and valid_reseaux(reseaux):
            m = C
            opt_reseaux = copy.deepcopy(reseaux)
            result(ville, opt_reseaux)
            print(m)

    return (opt_reseaux)


def find2(reseaux_ini):
    opt_reseaux=reseaux_ini
    temp_opt_reseaux=copy.deepcopy(opt_reseaux)
    N=list(range(sum(distribution),nb_nodes))
    while len(N)>0:
        m=float('inf')
        reseaux=copy.deepcopy(opt_reseaux)
        for i in range(len(N)):
            node=N[i]
            reseaux=evolve(reseaux,node)
            C=cost(reseaux)
            if C<m:
                temp_opt_reseaux=copy.deepcopy(reseaux)
                m=C
                opt_node_i=i
        N=N[:opt_node_i]+N[opt_node_i+1:]
        opt_reseaux=copy.deepcopy(temp_opt_reseaux)

    for i_node in range(sum(distribution),nb_nodes):
        delete(opt_reseaux,node)
        opt_reseaux=evolve(opt_reseaux,node)
    return opt_reseaux

R= find(reseaux)
assert(valid_reseaux(R,True))
print("coÃ»t final = ", cost(R))